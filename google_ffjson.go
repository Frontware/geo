// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: google.go

package geo

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
	"time"
)

// MarshalJSON marshal bytes to json - template
func (j *GoogleOpeningHours) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *GoogleOpeningHours) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	if j.OpenNow {
		buf.WriteString(`{"open_now":true`)
	} else {
		buf.WriteString(`{"open_now":false`)
	}
	buf.WriteString(`,"weekday_text":`)
	if j.WeekdayText != nil {
		buf.WriteString(`[`)
		for i, v := range j.WeekdayText {
			if i != 0 {
				buf.WriteString(`,`)
			}
			fflib.WriteJsonString(buf, string(v))
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"Periods":`)
	if j.Periods != nil {
		buf.WriteString(`[`)
		for i, v := range j.Periods {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Inline struct. type=struct { Close struct { Day int "json:\"day\""; Time string "json:\"time\"" } "json:\"close\""; Open struct { Day int "json:\"day\""; Time string "json:\"time\"" } "json:\"open\"" } kind=struct */
			/* Inline struct. type=struct { Day int "json:\"day\""; Time string "json:\"time\"" } kind=struct */
			buf.WriteString(`{ "close":{ "day":`)
			fflib.FormatBits2(buf, uint64(v.Close.Day), 10, v.Close.Day < 0)
			buf.WriteString(`,"time":`)
			fflib.WriteJsonString(buf, string(v.Close.Time))
			buf.WriteByte('}')
			/* Inline struct. type=struct { Day int "json:\"day\""; Time string "json:\"time\"" } kind=struct */
			buf.WriteString(`,"open":{ "day":`)
			fflib.FormatBits2(buf, uint64(v.Open.Day), 10, v.Open.Day < 0)
			buf.WriteString(`,"time":`)
			fflib.WriteJsonString(buf, string(v.Open.Time))
			buf.WriteByte('}')
			buf.WriteByte('}')
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtGoogleOpeningHoursbase = iota
	ffjtGoogleOpeningHoursnosuchkey

	ffjtGoogleOpeningHoursOpenNow

	ffjtGoogleOpeningHoursWeekdayText

	ffjtGoogleOpeningHoursPeriods
)

var ffjKeyGoogleOpeningHoursOpenNow = []byte("open_now")

var ffjKeyGoogleOpeningHoursWeekdayText = []byte("weekday_text")

var ffjKeyGoogleOpeningHoursPeriods = []byte("Periods")

// UnmarshalJSON umarshall json - template of ffjson
func (j *GoogleOpeningHours) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *GoogleOpeningHours) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtGoogleOpeningHoursbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtGoogleOpeningHoursnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'P':

					if bytes.Equal(ffjKeyGoogleOpeningHoursPeriods, kn) {
						currentKey = ffjtGoogleOpeningHoursPeriods
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeyGoogleOpeningHoursOpenNow, kn) {
						currentKey = ffjtGoogleOpeningHoursOpenNow
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffjKeyGoogleOpeningHoursWeekdayText, kn) {
						currentKey = ffjtGoogleOpeningHoursWeekdayText
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyGoogleOpeningHoursPeriods, kn) {
					currentKey = ffjtGoogleOpeningHoursPeriods
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGoogleOpeningHoursWeekdayText, kn) {
					currentKey = ffjtGoogleOpeningHoursWeekdayText
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyGoogleOpeningHoursOpenNow, kn) {
					currentKey = ffjtGoogleOpeningHoursOpenNow
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtGoogleOpeningHoursnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtGoogleOpeningHoursOpenNow:
					goto handle_OpenNow

				case ffjtGoogleOpeningHoursWeekdayText:
					goto handle_WeekdayText

				case ffjtGoogleOpeningHoursPeriods:
					goto handle_Periods

				case ffjtGoogleOpeningHoursnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_OpenNow:

	/* handler: j.OpenNow type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.OpenNow = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.OpenNow = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_WeekdayText:

	/* handler: j.WeekdayText type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.WeekdayText = nil
		} else {

			j.WeekdayText = []string{}

			wantVal := true

			for {

				var tmpJWeekdayText string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJWeekdayText type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJWeekdayText = string(string(outBuf))

					}
				}

				j.WeekdayText = append(j.WeekdayText, tmpJWeekdayText)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Periods:

	/* handler: j.Periods type=[]struct { Close struct { Day int "json:\"day\""; Time string "json:\"time\"" } "json:\"close\""; Open struct { Day int "json:\"day\""; Time string "json:\"time\"" } "json:\"open\"" } kind=slice quoted=false*/

	{
		/* Falling back. type=[]struct { Close struct { Day int "json:\"day\""; Time string "json:\"time\"" } "json:\"close\""; Open struct { Day int "json:\"day\""; Time string "json:\"time\"" } "json:\"open\"" } kind=slice */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Periods)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *GooglePlace) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *GooglePlace) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	/* Inline struct. type=struct { LocationType string "json:\"location_type \""; Location struct { Lat float64 "json:\"lat\""; Lng float64 "json:\"lng\"" } "json:\"location\"" } kind=struct */
	buf.WriteString(`{ "geometry":{ "location_type ":`)
	fflib.WriteJsonString(buf, string(j.Geometry.LocationType))
	/* Inline struct. type=struct { Lat float64 "json:\"lat\""; Lng float64 "json:\"lng\"" } kind=struct */
	buf.WriteString(`,"location":{ "lat":`)
	fflib.AppendFloat(buf, float64(j.Geometry.Location.Lat), 'g', -1, 64)
	buf.WriteString(`,"lng":`)
	fflib.AppendFloat(buf, float64(j.Geometry.Location.Lng), 'g', -1, 64)
	buf.WriteByte('}')
	buf.WriteByte('}')
	buf.WriteString(`,"icon":`)
	fflib.WriteJsonString(buf, string(j.Icon))
	buf.WriteString(`,"id":`)
	fflib.WriteJsonString(buf, string(j.ID))
	buf.WriteString(`,"name":`)
	fflib.WriteJsonString(buf, string(j.Name))
	buf.WriteString(`,"opening_hours":`)

	{

		err = j.OpeningHours.MarshalJSONBuf(buf)
		if err != nil {
			return err
		}

	}
	buf.WriteString(`,"photos":`)
	if j.Photos != nil {
		buf.WriteString(`[`)
		for i, v := range j.Photos {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Inline struct. type=struct { Height int64 "json:\"height\""; HTMLAttributions []string "json:\"html_attributions\""; PhotoReference string "json:\"photo_reference\""; Width int64 "json:\"width\"" } kind=struct */
			buf.WriteString(`{ "height":`)
			fflib.FormatBits2(buf, uint64(v.Height), 10, v.Height < 0)
			buf.WriteString(`,"html_attributions":`)
			if v.HTMLAttributions != nil {
				buf.WriteString(`[`)
				for i, v := range v.HTMLAttributions {
					if i != 0 {
						buf.WriteString(`,`)
					}
					fflib.WriteJsonString(buf, string(v))
				}
				buf.WriteString(`]`)
			} else {
				buf.WriteString(`null`)
			}
			buf.WriteString(`,"photo_reference":`)
			fflib.WriteJsonString(buf, string(v.PhotoReference))
			buf.WriteString(`,"width":`)
			fflib.FormatBits2(buf, uint64(v.Width), 10, v.Width < 0)
			buf.WriteByte('}')
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"place_id":`)
	fflib.WriteJsonString(buf, string(j.PlaceID))
	buf.WriteString(`,"price_level":`)
	fflib.FormatBits2(buf, uint64(j.PriceLevel), 10, j.PriceLevel < 0)
	buf.WriteString(`,"rating":`)
	/* Interface types must use runtime reflection. type=interface {} kind=interface */
	err = buf.Encode(j.Rating)
	if err != nil {
		return err
	}
	buf.WriteString(`,"reference":`)
	fflib.WriteJsonString(buf, string(j.Reference))
	buf.WriteString(`,"scope":`)
	fflib.WriteJsonString(buf, string(j.Scope))
	buf.WriteString(`,"types":`)
	if j.Types != nil {
		buf.WriteString(`[`)
		for i, v := range j.Types {
			if i != 0 {
				buf.WriteString(`,`)
			}
			fflib.WriteJsonString(buf, string(v))
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	if j.PartialMatch {
		buf.WriteString(`,"partial_match":true`)
	} else {
		buf.WriteString(`,"partial_match":false`)
	}
	buf.WriteString(`,"vicinity":`)
	fflib.WriteJsonString(buf, string(j.Vicinity))
	buf.WriteString(`,"address_components":`)
	if j.AddressComponents != nil {
		buf.WriteString(`[`)
		for i, v := range j.AddressComponents {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Inline struct. type=struct { LongName string "json:\"long_name\""; ShortName string "json:\"short_name\""; Types []string "json:\"types\"" } kind=struct */
			buf.WriteString(`{ "long_name":`)
			fflib.WriteJsonString(buf, string(v.LongName))
			buf.WriteString(`,"short_name":`)
			fflib.WriteJsonString(buf, string(v.ShortName))
			buf.WriteString(`,"types":`)
			if v.Types != nil {
				buf.WriteString(`[`)
				for i, v := range v.Types {
					if i != 0 {
						buf.WriteString(`,`)
					}
					fflib.WriteJsonString(buf, string(v))
				}
				buf.WriteString(`]`)
			} else {
				buf.WriteString(`null`)
			}
			buf.WriteByte('}')
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"adr_address":`)
	fflib.WriteJsonString(buf, string(j.AdrAddress))
	buf.WriteString(`,"formatted_address":`)
	fflib.WriteJsonString(buf, string(j.FormattedAddress))
	buf.WriteString(`,"formatted_phone_number":`)
	fflib.WriteJsonString(buf, string(j.FormattedPhoneNumber))
	buf.WriteString(`,"international_phone_number":`)
	fflib.WriteJsonString(buf, string(j.InternationalPhoneNumber))
	if j.PermanentlyClosed {
		buf.WriteString(`,"permanently_closed":true`)
	} else {
		buf.WriteString(`,"permanently_closed":false`)
	}
	buf.WriteString(`,"reviews":`)
	if j.Reviews != nil {
		buf.WriteString(`[`)
		for i, v := range j.Reviews {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"url":`)
	fflib.WriteJsonString(buf, string(j.URL))
	buf.WriteString(`,"user_ratings_total":`)
	fflib.FormatBits2(buf, uint64(j.UserRatingsTotal), 10, j.UserRatingsTotal < 0)
	buf.WriteString(`,"utc_offset":`)
	fflib.FormatBits2(buf, uint64(j.UtcOffset), 10, j.UtcOffset < 0)
	buf.WriteByte(',')
	if len(j.Website) != 0 {
		buf.WriteString(`"website":`)
		fflib.WriteJsonString(buf, string(j.Website))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtGooglePlacebase = iota
	ffjtGooglePlacenosuchkey

	ffjtGooglePlaceGeometry

	ffjtGooglePlaceIcon

	ffjtGooglePlaceID

	ffjtGooglePlaceName

	ffjtGooglePlaceOpeningHours

	ffjtGooglePlacePhotos

	ffjtGooglePlacePlaceID

	ffjtGooglePlacePriceLevel

	ffjtGooglePlaceRating

	ffjtGooglePlaceReference

	ffjtGooglePlaceScope

	ffjtGooglePlaceTypes

	ffjtGooglePlacePartialMatch

	ffjtGooglePlaceVicinity

	ffjtGooglePlaceAddressComponents

	ffjtGooglePlaceAdrAddress

	ffjtGooglePlaceFormattedAddress

	ffjtGooglePlaceFormattedPhoneNumber

	ffjtGooglePlaceInternationalPhoneNumber

	ffjtGooglePlacePermanentlyClosed

	ffjtGooglePlaceReviews

	ffjtGooglePlaceURL

	ffjtGooglePlaceUserRatingsTotal

	ffjtGooglePlaceUtcOffset

	ffjtGooglePlaceWebsite
)

var ffjKeyGooglePlaceGeometry = []byte("geometry")

var ffjKeyGooglePlaceIcon = []byte("icon")

var ffjKeyGooglePlaceID = []byte("id")

var ffjKeyGooglePlaceName = []byte("name")

var ffjKeyGooglePlaceOpeningHours = []byte("opening_hours")

var ffjKeyGooglePlacePhotos = []byte("photos")

var ffjKeyGooglePlacePlaceID = []byte("place_id")

var ffjKeyGooglePlacePriceLevel = []byte("price_level")

var ffjKeyGooglePlaceRating = []byte("rating")

var ffjKeyGooglePlaceReference = []byte("reference")

var ffjKeyGooglePlaceScope = []byte("scope")

var ffjKeyGooglePlaceTypes = []byte("types")

var ffjKeyGooglePlacePartialMatch = []byte("partial_match")

var ffjKeyGooglePlaceVicinity = []byte("vicinity")

var ffjKeyGooglePlaceAddressComponents = []byte("address_components")

var ffjKeyGooglePlaceAdrAddress = []byte("adr_address")

var ffjKeyGooglePlaceFormattedAddress = []byte("formatted_address")

var ffjKeyGooglePlaceFormattedPhoneNumber = []byte("formatted_phone_number")

var ffjKeyGooglePlaceInternationalPhoneNumber = []byte("international_phone_number")

var ffjKeyGooglePlacePermanentlyClosed = []byte("permanently_closed")

var ffjKeyGooglePlaceReviews = []byte("reviews")

var ffjKeyGooglePlaceURL = []byte("url")

var ffjKeyGooglePlaceUserRatingsTotal = []byte("user_ratings_total")

var ffjKeyGooglePlaceUtcOffset = []byte("utc_offset")

var ffjKeyGooglePlaceWebsite = []byte("website")

// UnmarshalJSON umarshall json - template of ffjson
func (j *GooglePlace) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *GooglePlace) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtGooglePlacebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtGooglePlacenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyGooglePlaceAddressComponents, kn) {
						currentKey = ffjtGooglePlaceAddressComponents
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlaceAdrAddress, kn) {
						currentKey = ffjtGooglePlaceAdrAddress
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffjKeyGooglePlaceFormattedAddress, kn) {
						currentKey = ffjtGooglePlaceFormattedAddress
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlaceFormattedPhoneNumber, kn) {
						currentKey = ffjtGooglePlaceFormattedPhoneNumber
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'g':

					if bytes.Equal(ffjKeyGooglePlaceGeometry, kn) {
						currentKey = ffjtGooglePlaceGeometry
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyGooglePlaceIcon, kn) {
						currentKey = ffjtGooglePlaceIcon
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlaceID, kn) {
						currentKey = ffjtGooglePlaceID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlaceInternationalPhoneNumber, kn) {
						currentKey = ffjtGooglePlaceInternationalPhoneNumber
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffjKeyGooglePlaceName, kn) {
						currentKey = ffjtGooglePlaceName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeyGooglePlaceOpeningHours, kn) {
						currentKey = ffjtGooglePlaceOpeningHours
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyGooglePlacePhotos, kn) {
						currentKey = ffjtGooglePlacePhotos
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlacePlaceID, kn) {
						currentKey = ffjtGooglePlacePlaceID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlacePriceLevel, kn) {
						currentKey = ffjtGooglePlacePriceLevel
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlacePartialMatch, kn) {
						currentKey = ffjtGooglePlacePartialMatch
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlacePermanentlyClosed, kn) {
						currentKey = ffjtGooglePlacePermanentlyClosed
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeyGooglePlaceRating, kn) {
						currentKey = ffjtGooglePlaceRating
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlaceReference, kn) {
						currentKey = ffjtGooglePlaceReference
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlaceReviews, kn) {
						currentKey = ffjtGooglePlaceReviews
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyGooglePlaceScope, kn) {
						currentKey = ffjtGooglePlaceScope
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyGooglePlaceTypes, kn) {
						currentKey = ffjtGooglePlaceTypes
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeyGooglePlaceURL, kn) {
						currentKey = ffjtGooglePlaceURL
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlaceUserRatingsTotal, kn) {
						currentKey = ffjtGooglePlaceUserRatingsTotal
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyGooglePlaceUtcOffset, kn) {
						currentKey = ffjtGooglePlaceUtcOffset
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffjKeyGooglePlaceVicinity, kn) {
						currentKey = ffjtGooglePlaceVicinity
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffjKeyGooglePlaceWebsite, kn) {
						currentKey = ffjtGooglePlaceWebsite
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyGooglePlaceWebsite, kn) {
					currentKey = ffjtGooglePlaceWebsite
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGooglePlaceUtcOffset, kn) {
					currentKey = ffjtGooglePlaceUtcOffset
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGooglePlaceUserRatingsTotal, kn) {
					currentKey = ffjtGooglePlaceUserRatingsTotal
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyGooglePlaceURL, kn) {
					currentKey = ffjtGooglePlaceURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGooglePlaceReviews, kn) {
					currentKey = ffjtGooglePlaceReviews
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGooglePlacePermanentlyClosed, kn) {
					currentKey = ffjtGooglePlacePermanentlyClosed
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyGooglePlaceInternationalPhoneNumber, kn) {
					currentKey = ffjtGooglePlaceInternationalPhoneNumber
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyGooglePlaceFormattedPhoneNumber, kn) {
					currentKey = ffjtGooglePlaceFormattedPhoneNumber
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGooglePlaceFormattedAddress, kn) {
					currentKey = ffjtGooglePlaceFormattedAddress
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGooglePlaceAdrAddress, kn) {
					currentKey = ffjtGooglePlaceAdrAddress
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGooglePlaceAddressComponents, kn) {
					currentKey = ffjtGooglePlaceAddressComponents
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyGooglePlaceVicinity, kn) {
					currentKey = ffjtGooglePlaceVicinity
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyGooglePlacePartialMatch, kn) {
					currentKey = ffjtGooglePlacePartialMatch
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGooglePlaceTypes, kn) {
					currentKey = ffjtGooglePlaceTypes
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGooglePlaceScope, kn) {
					currentKey = ffjtGooglePlaceScope
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyGooglePlaceReference, kn) {
					currentKey = ffjtGooglePlaceReference
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyGooglePlaceRating, kn) {
					currentKey = ffjtGooglePlaceRating
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyGooglePlacePriceLevel, kn) {
					currentKey = ffjtGooglePlacePriceLevel
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyGooglePlacePlaceID, kn) {
					currentKey = ffjtGooglePlacePlaceID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGooglePlacePhotos, kn) {
					currentKey = ffjtGooglePlacePhotos
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyGooglePlaceOpeningHours, kn) {
					currentKey = ffjtGooglePlaceOpeningHours
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyGooglePlaceName, kn) {
					currentKey = ffjtGooglePlaceName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyGooglePlaceID, kn) {
					currentKey = ffjtGooglePlaceID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyGooglePlaceIcon, kn) {
					currentKey = ffjtGooglePlaceIcon
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyGooglePlaceGeometry, kn) {
					currentKey = ffjtGooglePlaceGeometry
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtGooglePlacenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtGooglePlaceGeometry:
					goto handle_Geometry

				case ffjtGooglePlaceIcon:
					goto handle_Icon

				case ffjtGooglePlaceID:
					goto handle_ID

				case ffjtGooglePlaceName:
					goto handle_Name

				case ffjtGooglePlaceOpeningHours:
					goto handle_OpeningHours

				case ffjtGooglePlacePhotos:
					goto handle_Photos

				case ffjtGooglePlacePlaceID:
					goto handle_PlaceID

				case ffjtGooglePlacePriceLevel:
					goto handle_PriceLevel

				case ffjtGooglePlaceRating:
					goto handle_Rating

				case ffjtGooglePlaceReference:
					goto handle_Reference

				case ffjtGooglePlaceScope:
					goto handle_Scope

				case ffjtGooglePlaceTypes:
					goto handle_Types

				case ffjtGooglePlacePartialMatch:
					goto handle_PartialMatch

				case ffjtGooglePlaceVicinity:
					goto handle_Vicinity

				case ffjtGooglePlaceAddressComponents:
					goto handle_AddressComponents

				case ffjtGooglePlaceAdrAddress:
					goto handle_AdrAddress

				case ffjtGooglePlaceFormattedAddress:
					goto handle_FormattedAddress

				case ffjtGooglePlaceFormattedPhoneNumber:
					goto handle_FormattedPhoneNumber

				case ffjtGooglePlaceInternationalPhoneNumber:
					goto handle_InternationalPhoneNumber

				case ffjtGooglePlacePermanentlyClosed:
					goto handle_PermanentlyClosed

				case ffjtGooglePlaceReviews:
					goto handle_Reviews

				case ffjtGooglePlaceURL:
					goto handle_URL

				case ffjtGooglePlaceUserRatingsTotal:
					goto handle_UserRatingsTotal

				case ffjtGooglePlaceUtcOffset:
					goto handle_UtcOffset

				case ffjtGooglePlaceWebsite:
					goto handle_Website

				case ffjtGooglePlacenosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Geometry:

	/* handler: j.Geometry type=struct { LocationType string "json:\"location_type \""; Location struct { Lat float64 "json:\"lat\""; Lng float64 "json:\"lng\"" } "json:\"location\"" } kind=struct quoted=false*/

	{
		/* Falling back. type=struct { LocationType string "json:\"location_type \""; Location struct { Lat float64 "json:\"lat\""; Lng float64 "json:\"lng\"" } "json:\"location\"" } kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Geometry)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Icon:

	/* handler: j.Icon type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Icon = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ID:

	/* handler: j.ID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: j.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OpeningHours:

	/* handler: j.OpeningHours type=geo.GoogleOpeningHours kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			err = j.OpeningHours.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
			if err != nil {
				return err
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Photos:

	/* handler: j.Photos type=[]struct { Height int64 "json:\"height\""; HTMLAttributions []string "json:\"html_attributions\""; PhotoReference string "json:\"photo_reference\""; Width int64 "json:\"width\"" } kind=slice quoted=false*/

	{
		/* Falling back. type=[]struct { Height int64 "json:\"height\""; HTMLAttributions []string "json:\"html_attributions\""; PhotoReference string "json:\"photo_reference\""; Width int64 "json:\"width\"" } kind=slice */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Photos)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PlaceID:

	/* handler: j.PlaceID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.PlaceID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PriceLevel:

	/* handler: j.PriceLevel type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.PriceLevel = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Rating:

	/* handler: j.Rating type=interface {} kind=interface quoted=false*/

	{
		/* Falling back. type=interface {} kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Rating)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Reference:

	/* handler: j.Reference type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Reference = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Scope:

	/* handler: j.Scope type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Scope = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Types:

	/* handler: j.Types type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Types = nil
		} else {

			j.Types = []string{}

			wantVal := true

			for {

				var tmpJTypes string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJTypes type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJTypes = string(string(outBuf))

					}
				}

				j.Types = append(j.Types, tmpJTypes)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PartialMatch:

	/* handler: j.PartialMatch type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.PartialMatch = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.PartialMatch = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Vicinity:

	/* handler: j.Vicinity type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Vicinity = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AddressComponents:

	/* handler: j.AddressComponents type=[]struct { LongName string "json:\"long_name\""; ShortName string "json:\"short_name\""; Types []string "json:\"types\"" } kind=slice quoted=false*/

	{
		/* Falling back. type=[]struct { LongName string "json:\"long_name\""; ShortName string "json:\"short_name\""; Types []string "json:\"types\"" } kind=slice */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.AddressComponents)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AdrAddress:

	/* handler: j.AdrAddress type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.AdrAddress = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormattedAddress:

	/* handler: j.FormattedAddress type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.FormattedAddress = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FormattedPhoneNumber:

	/* handler: j.FormattedPhoneNumber type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.FormattedPhoneNumber = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_InternationalPhoneNumber:

	/* handler: j.InternationalPhoneNumber type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.InternationalPhoneNumber = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PermanentlyClosed:

	/* handler: j.PermanentlyClosed type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.PermanentlyClosed = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.PermanentlyClosed = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Reviews:

	/* handler: j.Reviews type=[]geo.gpReview kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Reviews = nil
		} else {

			j.Reviews = []gpReview{}

			wantVal := true

			for {

				var tmpJReviews gpReview

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJReviews type=geo.gpReview kind=struct quoted=false*/

				{
					if tok == fflib.FFTok_null {

					} else {

						err = tmpJReviews.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
						if err != nil {
							return err
						}
					}
					state = fflib.FFParse_after_value
				}

				j.Reviews = append(j.Reviews, tmpJReviews)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_URL:

	/* handler: j.URL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.URL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UserRatingsTotal:

	/* handler: j.UserRatingsTotal type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.UserRatingsTotal = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UtcOffset:

	/* handler: j.UtcOffset type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.UtcOffset = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Website:

	/* handler: j.Website type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Website = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *gpReview) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *gpReview) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "_id":`)
	fflib.WriteJsonString(buf, string(j.ID))
	buf.WriteString(`,"aspects":`)
	if j.Aspects != nil {
		buf.WriteString(`[`)
		for i, v := range j.Aspects {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Inline struct. type=struct { Rating int64 "json:\"rating\" bson:\"rating\""; Type string "json:\"type\" bson:\"type\"" } kind=struct */
			buf.WriteString(`{ "rating":`)
			fflib.FormatBits2(buf, uint64(v.Rating), 10, v.Rating < 0)
			buf.WriteString(`,"type":`)
			fflib.WriteJsonString(buf, string(v.Type))
			buf.WriteByte('}')
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"author_name":`)
	fflib.WriteJsonString(buf, string(j.AuthorName))
	buf.WriteString(`,"author_url":`)
	fflib.WriteJsonString(buf, string(j.AuthorURL))
	buf.WriteString(`,"language":`)
	fflib.WriteJsonString(buf, string(j.Language))
	buf.WriteString(`,"profile_photo_url":`)
	fflib.WriteJsonString(buf, string(j.ProfilePhotoURL))
	buf.WriteString(`,"rating":`)
	fflib.FormatBits2(buf, uint64(j.Rating), 10, j.Rating < 0)
	buf.WriteString(`,"text":`)
	fflib.WriteJsonString(buf, string(j.Text))
	buf.WriteByte(',')
	if j.Time != nil {
		if true {
			buf.WriteString(`"time":`)

			{

				obj, err = j.Time.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"venueid":`)
	fflib.WriteJsonString(buf, string(j.VenueID))
	buf.WriteByte(',')
	if j.ToShow != false {
		if j.ToShow {
			buf.WriteString(`"toShow":true`)
		} else {
			buf.WriteString(`"toShow":false`)
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtgpReviewbase = iota
	ffjtgpReviewnosuchkey

	ffjtgpReviewID

	ffjtgpReviewAspects

	ffjtgpReviewAuthorName

	ffjtgpReviewAuthorURL

	ffjtgpReviewLanguage

	ffjtgpReviewProfilePhotoURL

	ffjtgpReviewRating

	ffjtgpReviewText

	ffjtgpReviewTime

	ffjtgpReviewVenueID

	ffjtgpReviewToShow
)

var ffjKeygpReviewID = []byte("_id")

var ffjKeygpReviewAspects = []byte("aspects")

var ffjKeygpReviewAuthorName = []byte("author_name")

var ffjKeygpReviewAuthorURL = []byte("author_url")

var ffjKeygpReviewLanguage = []byte("language")

var ffjKeygpReviewProfilePhotoURL = []byte("profile_photo_url")

var ffjKeygpReviewRating = []byte("rating")

var ffjKeygpReviewText = []byte("text")

var ffjKeygpReviewTime = []byte("time")

var ffjKeygpReviewVenueID = []byte("venueid")

var ffjKeygpReviewToShow = []byte("toShow")

// UnmarshalJSON umarshall json - template of ffjson
func (j *gpReview) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *gpReview) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtgpReviewbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtgpReviewnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case '_':

					if bytes.Equal(ffjKeygpReviewID, kn) {
						currentKey = ffjtgpReviewID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'a':

					if bytes.Equal(ffjKeygpReviewAspects, kn) {
						currentKey = ffjtgpReviewAspects
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeygpReviewAuthorName, kn) {
						currentKey = ffjtgpReviewAuthorName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeygpReviewAuthorURL, kn) {
						currentKey = ffjtgpReviewAuthorURL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeygpReviewLanguage, kn) {
						currentKey = ffjtgpReviewLanguage
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeygpReviewProfilePhotoURL, kn) {
						currentKey = ffjtgpReviewProfilePhotoURL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeygpReviewRating, kn) {
						currentKey = ffjtgpReviewRating
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeygpReviewText, kn) {
						currentKey = ffjtgpReviewText
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeygpReviewTime, kn) {
						currentKey = ffjtgpReviewTime
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeygpReviewToShow, kn) {
						currentKey = ffjtgpReviewToShow
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffjKeygpReviewVenueID, kn) {
						currentKey = ffjtgpReviewVenueID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeygpReviewToShow, kn) {
					currentKey = ffjtgpReviewToShow
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeygpReviewVenueID, kn) {
					currentKey = ffjtgpReviewVenueID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeygpReviewTime, kn) {
					currentKey = ffjtgpReviewTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeygpReviewText, kn) {
					currentKey = ffjtgpReviewText
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeygpReviewRating, kn) {
					currentKey = ffjtgpReviewRating
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeygpReviewProfilePhotoURL, kn) {
					currentKey = ffjtgpReviewProfilePhotoURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeygpReviewLanguage, kn) {
					currentKey = ffjtgpReviewLanguage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeygpReviewAuthorURL, kn) {
					currentKey = ffjtgpReviewAuthorURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeygpReviewAuthorName, kn) {
					currentKey = ffjtgpReviewAuthorName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeygpReviewAspects, kn) {
					currentKey = ffjtgpReviewAspects
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeygpReviewID, kn) {
					currentKey = ffjtgpReviewID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtgpReviewnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtgpReviewID:
					goto handle_ID

				case ffjtgpReviewAspects:
					goto handle_Aspects

				case ffjtgpReviewAuthorName:
					goto handle_AuthorName

				case ffjtgpReviewAuthorURL:
					goto handle_AuthorURL

				case ffjtgpReviewLanguage:
					goto handle_Language

				case ffjtgpReviewProfilePhotoURL:
					goto handle_ProfilePhotoURL

				case ffjtgpReviewRating:
					goto handle_Rating

				case ffjtgpReviewText:
					goto handle_Text

				case ffjtgpReviewTime:
					goto handle_Time

				case ffjtgpReviewVenueID:
					goto handle_VenueID

				case ffjtgpReviewToShow:
					goto handle_ToShow

				case ffjtgpReviewnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: j.ID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Aspects:

	/* handler: j.Aspects type=[]struct { Rating int64 "json:\"rating\" bson:\"rating\""; Type string "json:\"type\" bson:\"type\"" } kind=slice quoted=false*/

	{
		/* Falling back. type=[]struct { Rating int64 "json:\"rating\" bson:\"rating\""; Type string "json:\"type\" bson:\"type\"" } kind=slice */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Aspects)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AuthorName:

	/* handler: j.AuthorName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.AuthorName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AuthorURL:

	/* handler: j.AuthorURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.AuthorURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Language:

	/* handler: j.Language type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Language = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ProfilePhotoURL:

	/* handler: j.ProfilePhotoURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ProfilePhotoURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Rating:

	/* handler: j.Rating type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Rating = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Text:

	/* handler: j.Text type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Text = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Time:

	/* handler: j.Time type=time.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Time = nil

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			if j.Time == nil {
				j.Time = new(time.Time)
			}

			err = j.Time.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_VenueID:

	/* handler: j.VenueID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.VenueID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ToShow:

	/* handler: j.ToShow type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.ToShow = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.ToShow = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
