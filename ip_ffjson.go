// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: ip.go

package geo

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *IPAPI) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *IPAPI) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"ip":`)
	fflib.WriteJsonString(buf, string(j.IP))
	buf.WriteString(`,"version":`)
	fflib.WriteJsonString(buf, string(j.Version))
	buf.WriteString(`,"city":`)
	fflib.WriteJsonString(buf, string(j.City))
	buf.WriteString(`,"region":`)
	fflib.WriteJsonString(buf, string(j.Region))
	buf.WriteString(`,"region_code":`)
	fflib.WriteJsonString(buf, string(j.RegionCode))
	buf.WriteString(`,"country_code":`)
	fflib.WriteJsonString(buf, string(j.CountryCode))
	buf.WriteString(`,"country_code_iso3":`)
	fflib.WriteJsonString(buf, string(j.CountryCodeIso3))
	buf.WriteString(`,"country_name":`)
	fflib.WriteJsonString(buf, string(j.CountryName))
	buf.WriteString(`,"country_capital":`)
	fflib.WriteJsonString(buf, string(j.CountryCapital))
	buf.WriteString(`,"country_tld":`)
	fflib.WriteJsonString(buf, string(j.CountryTld))
	buf.WriteString(`,"continent_code":`)
	fflib.WriteJsonString(buf, string(j.ContinentCode))
	if j.InEu {
		buf.WriteString(`,"in_eu":true`)
	} else {
		buf.WriteString(`,"in_eu":false`)
	}
	buf.WriteString(`,"postal":`)
	fflib.WriteJsonString(buf, string(j.Postal))
	buf.WriteString(`,"latitude":`)
	fflib.AppendFloat(buf, float64(j.Latitude), 'g', -1, 64)
	buf.WriteString(`,"longitude":`)
	fflib.AppendFloat(buf, float64(j.Longitude), 'g', -1, 64)
	buf.WriteString(`,"timezone":`)
	fflib.WriteJsonString(buf, string(j.Timezone))
	buf.WriteString(`,"utc_offset":`)
	fflib.WriteJsonString(buf, string(j.UtcOffset))
	buf.WriteString(`,"country_calling_code":`)
	fflib.WriteJsonString(buf, string(j.CountryCallingCode))
	buf.WriteString(`,"currency":`)
	fflib.WriteJsonString(buf, string(j.Currency))
	buf.WriteString(`,"currency_name":`)
	fflib.WriteJsonString(buf, string(j.CurrencyName))
	buf.WriteString(`,"languages":`)
	fflib.WriteJsonString(buf, string(j.Languages))
	buf.WriteString(`,"country_area":`)
	fflib.AppendFloat(buf, float64(j.CountryArea), 'g', -1, 64)
	buf.WriteString(`,"country_population":`)
	fflib.AppendFloat(buf, float64(j.CountryPopulation), 'g', -1, 64)
	buf.WriteString(`,"asn":`)
	fflib.WriteJsonString(buf, string(j.Asn))
	buf.WriteString(`,"org":`)
	fflib.WriteJsonString(buf, string(j.Org))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtIPAPIbase = iota
	ffjtIPAPInosuchkey

	ffjtIPAPIIP

	ffjtIPAPIVersion

	ffjtIPAPICity

	ffjtIPAPIRegion

	ffjtIPAPIRegionCode

	ffjtIPAPICountryCode

	ffjtIPAPICountryCodeIso3

	ffjtIPAPICountryName

	ffjtIPAPICountryCapital

	ffjtIPAPICountryTld

	ffjtIPAPIContinentCode

	ffjtIPAPIInEu

	ffjtIPAPIPostal

	ffjtIPAPILatitude

	ffjtIPAPILongitude

	ffjtIPAPITimezone

	ffjtIPAPIUtcOffset

	ffjtIPAPICountryCallingCode

	ffjtIPAPICurrency

	ffjtIPAPICurrencyName

	ffjtIPAPILanguages

	ffjtIPAPICountryArea

	ffjtIPAPICountryPopulation

	ffjtIPAPIAsn

	ffjtIPAPIOrg
)

var ffjKeyIPAPIIP = []byte("ip")

var ffjKeyIPAPIVersion = []byte("version")

var ffjKeyIPAPICity = []byte("city")

var ffjKeyIPAPIRegion = []byte("region")

var ffjKeyIPAPIRegionCode = []byte("region_code")

var ffjKeyIPAPICountryCode = []byte("country_code")

var ffjKeyIPAPICountryCodeIso3 = []byte("country_code_iso3")

var ffjKeyIPAPICountryName = []byte("country_name")

var ffjKeyIPAPICountryCapital = []byte("country_capital")

var ffjKeyIPAPICountryTld = []byte("country_tld")

var ffjKeyIPAPIContinentCode = []byte("continent_code")

var ffjKeyIPAPIInEu = []byte("in_eu")

var ffjKeyIPAPIPostal = []byte("postal")

var ffjKeyIPAPILatitude = []byte("latitude")

var ffjKeyIPAPILongitude = []byte("longitude")

var ffjKeyIPAPITimezone = []byte("timezone")

var ffjKeyIPAPIUtcOffset = []byte("utc_offset")

var ffjKeyIPAPICountryCallingCode = []byte("country_calling_code")

var ffjKeyIPAPICurrency = []byte("currency")

var ffjKeyIPAPICurrencyName = []byte("currency_name")

var ffjKeyIPAPILanguages = []byte("languages")

var ffjKeyIPAPICountryArea = []byte("country_area")

var ffjKeyIPAPICountryPopulation = []byte("country_population")

var ffjKeyIPAPIAsn = []byte("asn")

var ffjKeyIPAPIOrg = []byte("org")

// UnmarshalJSON umarshall json - template of ffjson
func (j *IPAPI) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *IPAPI) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtIPAPIbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtIPAPInosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyIPAPIAsn, kn) {
						currentKey = ffjtIPAPIAsn
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyIPAPICity, kn) {
						currentKey = ffjtIPAPICity
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPICountryCode, kn) {
						currentKey = ffjtIPAPICountryCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPICountryCodeIso3, kn) {
						currentKey = ffjtIPAPICountryCodeIso3
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPICountryName, kn) {
						currentKey = ffjtIPAPICountryName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPICountryCapital, kn) {
						currentKey = ffjtIPAPICountryCapital
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPICountryTld, kn) {
						currentKey = ffjtIPAPICountryTld
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPIContinentCode, kn) {
						currentKey = ffjtIPAPIContinentCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPICountryCallingCode, kn) {
						currentKey = ffjtIPAPICountryCallingCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPICurrency, kn) {
						currentKey = ffjtIPAPICurrency
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPICurrencyName, kn) {
						currentKey = ffjtIPAPICurrencyName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPICountryArea, kn) {
						currentKey = ffjtIPAPICountryArea
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPICountryPopulation, kn) {
						currentKey = ffjtIPAPICountryPopulation
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyIPAPIIP, kn) {
						currentKey = ffjtIPAPIIP
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPIInEu, kn) {
						currentKey = ffjtIPAPIInEu
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeyIPAPILatitude, kn) {
						currentKey = ffjtIPAPILatitude
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPILongitude, kn) {
						currentKey = ffjtIPAPILongitude
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPILanguages, kn) {
						currentKey = ffjtIPAPILanguages
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeyIPAPIOrg, kn) {
						currentKey = ffjtIPAPIOrg
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyIPAPIPostal, kn) {
						currentKey = ffjtIPAPIPostal
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeyIPAPIRegion, kn) {
						currentKey = ffjtIPAPIRegion
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPAPIRegionCode, kn) {
						currentKey = ffjtIPAPIRegionCode
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyIPAPITimezone, kn) {
						currentKey = ffjtIPAPITimezone
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeyIPAPIUtcOffset, kn) {
						currentKey = ffjtIPAPIUtcOffset
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffjKeyIPAPIVersion, kn) {
						currentKey = ffjtIPAPIVersion
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPAPIOrg, kn) {
					currentKey = ffjtIPAPIOrg
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyIPAPIAsn, kn) {
					currentKey = ffjtIPAPIAsn
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPAPICountryPopulation, kn) {
					currentKey = ffjtIPAPICountryPopulation
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPAPICountryArea, kn) {
					currentKey = ffjtIPAPICountryArea
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyIPAPILanguages, kn) {
					currentKey = ffjtIPAPILanguages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPAPICurrencyName, kn) {
					currentKey = ffjtIPAPICurrencyName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPAPICurrency, kn) {
					currentKey = ffjtIPAPICurrency
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPAPICountryCallingCode, kn) {
					currentKey = ffjtIPAPICountryCallingCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyIPAPIUtcOffset, kn) {
					currentKey = ffjtIPAPIUtcOffset
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPAPITimezone, kn) {
					currentKey = ffjtIPAPITimezone
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPAPILongitude, kn) {
					currentKey = ffjtIPAPILongitude
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPAPILatitude, kn) {
					currentKey = ffjtIPAPILatitude
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyIPAPIPostal, kn) {
					currentKey = ffjtIPAPIPostal
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPAPIInEu, kn) {
					currentKey = ffjtIPAPIInEu
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPAPIContinentCode, kn) {
					currentKey = ffjtIPAPIContinentCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPAPICountryTld, kn) {
					currentKey = ffjtIPAPICountryTld
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPAPICountryCapital, kn) {
					currentKey = ffjtIPAPICountryCapital
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPAPICountryName, kn) {
					currentKey = ffjtIPAPICountryName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyIPAPICountryCodeIso3, kn) {
					currentKey = ffjtIPAPICountryCodeIso3
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPAPICountryCode, kn) {
					currentKey = ffjtIPAPICountryCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPAPIRegionCode, kn) {
					currentKey = ffjtIPAPIRegionCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPAPIRegion, kn) {
					currentKey = ffjtIPAPIRegion
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPAPICity, kn) {
					currentKey = ffjtIPAPICity
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyIPAPIVersion, kn) {
					currentKey = ffjtIPAPIVersion
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPAPIIP, kn) {
					currentKey = ffjtIPAPIIP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtIPAPInosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtIPAPIIP:
					goto handle_IP

				case ffjtIPAPIVersion:
					goto handle_Version

				case ffjtIPAPICity:
					goto handle_City

				case ffjtIPAPIRegion:
					goto handle_Region

				case ffjtIPAPIRegionCode:
					goto handle_RegionCode

				case ffjtIPAPICountryCode:
					goto handle_CountryCode

				case ffjtIPAPICountryCodeIso3:
					goto handle_CountryCodeIso3

				case ffjtIPAPICountryName:
					goto handle_CountryName

				case ffjtIPAPICountryCapital:
					goto handle_CountryCapital

				case ffjtIPAPICountryTld:
					goto handle_CountryTld

				case ffjtIPAPIContinentCode:
					goto handle_ContinentCode

				case ffjtIPAPIInEu:
					goto handle_InEu

				case ffjtIPAPIPostal:
					goto handle_Postal

				case ffjtIPAPILatitude:
					goto handle_Latitude

				case ffjtIPAPILongitude:
					goto handle_Longitude

				case ffjtIPAPITimezone:
					goto handle_Timezone

				case ffjtIPAPIUtcOffset:
					goto handle_UtcOffset

				case ffjtIPAPICountryCallingCode:
					goto handle_CountryCallingCode

				case ffjtIPAPICurrency:
					goto handle_Currency

				case ffjtIPAPICurrencyName:
					goto handle_CurrencyName

				case ffjtIPAPILanguages:
					goto handle_Languages

				case ffjtIPAPICountryArea:
					goto handle_CountryArea

				case ffjtIPAPICountryPopulation:
					goto handle_CountryPopulation

				case ffjtIPAPIAsn:
					goto handle_Asn

				case ffjtIPAPIOrg:
					goto handle_Org

				case ffjtIPAPInosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_IP:

	/* handler: j.IP type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.IP = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Version:

	/* handler: j.Version type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Version = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_City:

	/* handler: j.City type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.City = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Region:

	/* handler: j.Region type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Region = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RegionCode:

	/* handler: j.RegionCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.RegionCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CountryCode:

	/* handler: j.CountryCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CountryCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CountryCodeIso3:

	/* handler: j.CountryCodeIso3 type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CountryCodeIso3 = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CountryName:

	/* handler: j.CountryName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CountryName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CountryCapital:

	/* handler: j.CountryCapital type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CountryCapital = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CountryTld:

	/* handler: j.CountryTld type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CountryTld = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContinentCode:

	/* handler: j.ContinentCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ContinentCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_InEu:

	/* handler: j.InEu type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.InEu = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.InEu = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Postal:

	/* handler: j.Postal type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Postal = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Latitude:

	/* handler: j.Latitude type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Latitude = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Longitude:

	/* handler: j.Longitude type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Longitude = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Timezone:

	/* handler: j.Timezone type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Timezone = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UtcOffset:

	/* handler: j.UtcOffset type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.UtcOffset = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CountryCallingCode:

	/* handler: j.CountryCallingCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CountryCallingCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Currency:

	/* handler: j.Currency type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Currency = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CurrencyName:

	/* handler: j.CurrencyName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CurrencyName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Languages:

	/* handler: j.Languages type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Languages = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CountryArea:

	/* handler: j.CountryArea type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.CountryArea = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CountryPopulation:

	/* handler: j.CountryPopulation type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.CountryPopulation = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Asn:

	/* handler: j.Asn type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Asn = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Org:

	/* handler: j.Org type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Org = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *IPLocation) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *IPLocation) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"city":`)
	/* Interface types must use runtime reflection. type=interface {} kind=interface */
	err = buf.Encode(j.City)
	if err != nil {
		return err
	}
	buf.WriteString(`,"continent_code":`)
	fflib.WriteJsonString(buf, string(j.ContinentCode))
	buf.WriteString(`,"continent_name":`)
	fflib.WriteJsonString(buf, string(j.ContinentName))
	buf.WriteString(`,"country_code":`)
	fflib.WriteJsonString(buf, string(j.CountryCode))
	buf.WriteString(`,"country_name":`)
	fflib.WriteJsonString(buf, string(j.CountryName))
	buf.WriteString(`,"ip":`)
	fflib.WriteJsonString(buf, string(j.IP))
	buf.WriteString(`,"latitude":`)
	fflib.FormatBits2(buf, uint64(j.Latitude), 10, j.Latitude < 0)
	/* Inline struct. type=struct { CallingCode string "json:\"calling_code\""; Capital string "json:\"capital\""; CountryFlag string "json:\"country_flag\""; CountryFlagEmoji string "json:\"country_flag_emoji\""; CountryFlagEmojiUnicode string "json:\"country_flag_emoji_unicode\""; GeonameID interface {} "json:\"geoname_id\""; IsEu bool "json:\"is_eu\""; Languages []struct { Code string "json:\"code\""; Name string "json:\"name\""; Native string "json:\"native\"" } "json:\"languages\"" } kind=struct */
	buf.WriteString(`,"location":{ "calling_code":`)
	fflib.WriteJsonString(buf, string(j.Location.CallingCode))
	buf.WriteString(`,"capital":`)
	fflib.WriteJsonString(buf, string(j.Location.Capital))
	buf.WriteString(`,"country_flag":`)
	fflib.WriteJsonString(buf, string(j.Location.CountryFlag))
	buf.WriteString(`,"country_flag_emoji":`)
	fflib.WriteJsonString(buf, string(j.Location.CountryFlagEmoji))
	buf.WriteString(`,"country_flag_emoji_unicode":`)
	fflib.WriteJsonString(buf, string(j.Location.CountryFlagEmojiUnicode))
	buf.WriteString(`,"geoname_id":`)
	/* Interface types must use runtime reflection. type=interface {} kind=interface */
	err = buf.Encode(j.Location.GeonameID)
	if err != nil {
		return err
	}
	if j.Location.IsEu {
		buf.WriteString(`,"is_eu":true`)
	} else {
		buf.WriteString(`,"is_eu":false`)
	}
	buf.WriteString(`,"languages":`)
	if j.Location.Languages != nil {
		buf.WriteString(`[`)
		for i, v := range j.Location.Languages {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Inline struct. type=struct { Code string "json:\"code\""; Name string "json:\"name\""; Native string "json:\"native\"" } kind=struct */
			buf.WriteString(`{ "code":`)
			fflib.WriteJsonString(buf, string(v.Code))
			buf.WriteString(`,"name":`)
			fflib.WriteJsonString(buf, string(v.Name))
			buf.WriteString(`,"native":`)
			fflib.WriteJsonString(buf, string(v.Native))
			buf.WriteByte('}')
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	buf.WriteString(`,"longitude":`)
	fflib.FormatBits2(buf, uint64(j.Longitude), 10, j.Longitude < 0)
	buf.WriteString(`,"region_code":`)
	/* Interface types must use runtime reflection. type=interface {} kind=interface */
	err = buf.Encode(j.RegionCode)
	if err != nil {
		return err
	}
	buf.WriteString(`,"region_name":`)
	/* Interface types must use runtime reflection. type=interface {} kind=interface */
	err = buf.Encode(j.RegionName)
	if err != nil {
		return err
	}
	buf.WriteString(`,"type":`)
	fflib.WriteJsonString(buf, string(j.Type))
	buf.WriteString(`,"zip":`)
	/* Interface types must use runtime reflection. type=interface {} kind=interface */
	err = buf.Encode(j.Zip)
	if err != nil {
		return err
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtIPLocationbase = iota
	ffjtIPLocationnosuchkey

	ffjtIPLocationCity

	ffjtIPLocationContinentCode

	ffjtIPLocationContinentName

	ffjtIPLocationCountryCode

	ffjtIPLocationCountryName

	ffjtIPLocationIP

	ffjtIPLocationLatitude

	ffjtIPLocationLocation

	ffjtIPLocationLongitude

	ffjtIPLocationRegionCode

	ffjtIPLocationRegionName

	ffjtIPLocationType

	ffjtIPLocationZip
)

var ffjKeyIPLocationCity = []byte("city")

var ffjKeyIPLocationContinentCode = []byte("continent_code")

var ffjKeyIPLocationContinentName = []byte("continent_name")

var ffjKeyIPLocationCountryCode = []byte("country_code")

var ffjKeyIPLocationCountryName = []byte("country_name")

var ffjKeyIPLocationIP = []byte("ip")

var ffjKeyIPLocationLatitude = []byte("latitude")

var ffjKeyIPLocationLocation = []byte("location")

var ffjKeyIPLocationLongitude = []byte("longitude")

var ffjKeyIPLocationRegionCode = []byte("region_code")

var ffjKeyIPLocationRegionName = []byte("region_name")

var ffjKeyIPLocationType = []byte("type")

var ffjKeyIPLocationZip = []byte("zip")

// UnmarshalJSON umarshall json - template of ffjson
func (j *IPLocation) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *IPLocation) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtIPLocationbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtIPLocationnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffjKeyIPLocationCity, kn) {
						currentKey = ffjtIPLocationCity
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPLocationContinentCode, kn) {
						currentKey = ffjtIPLocationContinentCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPLocationContinentName, kn) {
						currentKey = ffjtIPLocationContinentName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPLocationCountryCode, kn) {
						currentKey = ffjtIPLocationCountryCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPLocationCountryName, kn) {
						currentKey = ffjtIPLocationCountryName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyIPLocationIP, kn) {
						currentKey = ffjtIPLocationIP
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeyIPLocationLatitude, kn) {
						currentKey = ffjtIPLocationLatitude
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPLocationLocation, kn) {
						currentKey = ffjtIPLocationLocation
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPLocationLongitude, kn) {
						currentKey = ffjtIPLocationLongitude
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeyIPLocationRegionCode, kn) {
						currentKey = ffjtIPLocationRegionCode
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyIPLocationRegionName, kn) {
						currentKey = ffjtIPLocationRegionName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyIPLocationType, kn) {
						currentKey = ffjtIPLocationType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'z':

					if bytes.Equal(ffjKeyIPLocationZip, kn) {
						currentKey = ffjtIPLocationZip
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPLocationZip, kn) {
					currentKey = ffjtIPLocationZip
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPLocationType, kn) {
					currentKey = ffjtIPLocationType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPLocationRegionName, kn) {
					currentKey = ffjtIPLocationRegionName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPLocationRegionCode, kn) {
					currentKey = ffjtIPLocationRegionCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPLocationLongitude, kn) {
					currentKey = ffjtIPLocationLongitude
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPLocationLocation, kn) {
					currentKey = ffjtIPLocationLocation
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPLocationLatitude, kn) {
					currentKey = ffjtIPLocationLatitude
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPLocationIP, kn) {
					currentKey = ffjtIPLocationIP
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPLocationCountryName, kn) {
					currentKey = ffjtIPLocationCountryName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPLocationCountryCode, kn) {
					currentKey = ffjtIPLocationCountryCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPLocationContinentName, kn) {
					currentKey = ffjtIPLocationContinentName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyIPLocationContinentCode, kn) {
					currentKey = ffjtIPLocationContinentCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyIPLocationCity, kn) {
					currentKey = ffjtIPLocationCity
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtIPLocationnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtIPLocationCity:
					goto handle_City

				case ffjtIPLocationContinentCode:
					goto handle_ContinentCode

				case ffjtIPLocationContinentName:
					goto handle_ContinentName

				case ffjtIPLocationCountryCode:
					goto handle_CountryCode

				case ffjtIPLocationCountryName:
					goto handle_CountryName

				case ffjtIPLocationIP:
					goto handle_IP

				case ffjtIPLocationLatitude:
					goto handle_Latitude

				case ffjtIPLocationLocation:
					goto handle_Location

				case ffjtIPLocationLongitude:
					goto handle_Longitude

				case ffjtIPLocationRegionCode:
					goto handle_RegionCode

				case ffjtIPLocationRegionName:
					goto handle_RegionName

				case ffjtIPLocationType:
					goto handle_Type

				case ffjtIPLocationZip:
					goto handle_Zip

				case ffjtIPLocationnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_City:

	/* handler: j.City type=interface {} kind=interface quoted=false*/

	{
		/* Falling back. type=interface {} kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.City)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContinentCode:

	/* handler: j.ContinentCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ContinentCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContinentName:

	/* handler: j.ContinentName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ContinentName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CountryCode:

	/* handler: j.CountryCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CountryCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CountryName:

	/* handler: j.CountryName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CountryName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IP:

	/* handler: j.IP type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.IP = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Latitude:

	/* handler: j.Latitude type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Latitude = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Location:

	/* handler: j.Location type=struct { CallingCode string "json:\"calling_code\""; Capital string "json:\"capital\""; CountryFlag string "json:\"country_flag\""; CountryFlagEmoji string "json:\"country_flag_emoji\""; CountryFlagEmojiUnicode string "json:\"country_flag_emoji_unicode\""; GeonameID interface {} "json:\"geoname_id\""; IsEu bool "json:\"is_eu\""; Languages []struct { Code string "json:\"code\""; Name string "json:\"name\""; Native string "json:\"native\"" } "json:\"languages\"" } kind=struct quoted=false*/

	{
		/* Falling back. type=struct { CallingCode string "json:\"calling_code\""; Capital string "json:\"capital\""; CountryFlag string "json:\"country_flag\""; CountryFlagEmoji string "json:\"country_flag_emoji\""; CountryFlagEmojiUnicode string "json:\"country_flag_emoji_unicode\""; GeonameID interface {} "json:\"geoname_id\""; IsEu bool "json:\"is_eu\""; Languages []struct { Code string "json:\"code\""; Name string "json:\"name\""; Native string "json:\"native\"" } "json:\"languages\"" } kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Location)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Longitude:

	/* handler: j.Longitude type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Longitude = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RegionCode:

	/* handler: j.RegionCode type=interface {} kind=interface quoted=false*/

	{
		/* Falling back. type=interface {} kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.RegionCode)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RegionName:

	/* handler: j.RegionName type=interface {} kind=interface quoted=false*/

	{
		/* Falling back. type=interface {} kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.RegionName)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: j.Type type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Type = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Zip:

	/* handler: j.Zip type=interface {} kind=interface quoted=false*/

	{
		/* Falling back. type=interface {} kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Zip)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
